#!/bin/bash
# TO TEST - /opt/flir2qr/sh/flir2qr_v10 /opt/flir2qr FireFlight_20180601_121018.7z
# IN CASE OF PERMISSIONS ERRORS, CHECK README at https://github.com/smk762/flir2qr
# PNG 000037 is an example where file space issue exists.
RED='\033[1;0;31m';
WHITE='\033[1;37m';
BLUE='\033[1;34m';
GREEN='\033[0;32m';
YELLOW='\033[1;33m';
CYAN='\033[0;36m';
PURPLE='\033[1;35m';
RED='\033[1;0;31m';
timestamp=$(date +%F_%T);
IP="$(echo -e $(hostname -I) | tr -d '[:space:]')";
MAPSIZE="2000 1600";
PIXELRANGE="0 8000";

# TODOs
echo 'to do: use pwg files to derive EPSG';
echo 'reduce vector variable to folder';
echo 'debug filesize issues';
echo 'create PDF before TIF';

# Set install and output paths
z7_FILENAME="${2%.*}";
FLIR2QR_PATH="/opt/flir2qr";
WWWPATH="/var/www/html/flir2qr/${z7_FILENAME}";
OUTPATH="${FLIR2QR_PATH}/output/${z7_FILENAME}";

# Define vector layers
#ROADSFILE="$FLIR2QR_PATH/vectors/sample_roads_4m_buff.shp";
ROADSFILE="$FLIR2QR_PATH/vectors/rds_wgs84_5m_buffer.shp";
GRIDFILE="$FLIR2QR_PATH/vectors/100m_grid_wgs84_1m_buff.shp";

# Define legend and logo images (inactive at the moment)
LOGO="$FLIR2QR_PATH/img/logo.gif";
LEGEND="$FLIR2QR_PATH/img/legend.jpg";

# Create output folders for archiving and public transmission
rm -Rf ${WWWPATH};
rm -Rf ${FLIR2QR_PATH}/output/${z7_FILENAME};

mkdir ${WWWPATH};
mkdir ${FLIR2QR_PATH}/output/${z7_FILENAME};
	# create output subfolders
	declare -a OUTDIRS=('tif' 'qr' 'pdf' 'tif' 'kmz' 'log' 'kml' '\');
	for dir in "${OUTDIRS[@]}"; do  mkdir -p ${FLIR2QR_PATH}/output/${z7_FILENAME}/$dir; done
	for dir in "${OUTDIRS[@]}"; do  mkdir -p ${WWWPATH}/$dir; done

# process data if path/file parameters lead to a file
echo -e "Started processing $2 at $timestamp"$'\r' >> $FLIR2QR_PATH/log/flir2qr.log;
if [ -e ${1}/${2} ]
  then echo -e "${BLUE}Uploaded zipfile $1/$2 detected";
  else echo -e "${RED}$timestamp - $2 does not exist, exiting.${WHITE}"$'\r'; echo -e "$timestamp - $2 does not exist, exiting."$'\r' >> $FLIR2QR_PATH/log/error.log; exit 1; 
fi;

echo -e "Checking for 7z archive";
case "$2" in
*.7z)
	# Create random temp folders for processing
	if [ -e ${FLIR2QR_PATH}/temp.txt ]
		then echo -e "${PURPLE}TempDir has already been spawned";
		else echo -e "$RANDOM" > "$FLIR2QR_PATH/temp.txt";
	fi
	TEMPDIR=$(cat $FLIR2QR_PATH/temp.txt);
	TEMP_PATH=$FLIR2QR_PATH/temp/$TEMPDIR;
	rm -Rf ${TEMP_PATH};
	echo -e "${PURPLE}Creating temporary folders in ${TEMP_PATH}";
	# create temp subfolders
	declare -a PROCDIRS=('raw' 'mga_50' 'wgs84' 'clipfence' 'hotspot' 'basemap' 'roads' 'kmz' 'kml' 'shp' 'grid' 'overlay' 'vrt' 'label' 'pdf');
	for dir in "${PROCDIRS[@]}"; do  mkdir -p ${TEMP_PATH}/$dir; done

	# unzip incoming data
	echo -e "Extracting archive";
	7z x $1/$2 -o${TEMP_PATH}
	echo -e "${GREEN}Copying PNGs${YELLOW}";
	mv ${TEMP_PATH}/$z7_FILENAME/HotSpots/*  ${TEMP_PATH}/hotspot;
	mv ${TEMP_PATH}/$z7_FILENAME/PNGs/*  ${TEMP_PATH}/raw;
	rm -Rf ${TEMP_PATH}/$z7_FILENAME;
	

	# process all pngs
	for filename in ${TEMP_PATH}/raw/*.png; do
		fname=$(basename "$filename")
		WILDFILE=${fname%.*};
		echo -e "${PURPLE}Processing $fname ${YELLOW}";
		
		# prepare hotspots
		echo -e "${GREEN} Set Hotspot coords to MGA zone 50 ${YELLOW}";
			gdal_translate -a_srs EPSG:28350 ${TEMP_PATH}/hotspot/${WILDFILE}.png ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif -co COMPRESS=LZW -b 1 -a_nodata 0 -of GTiff;
		echo -e "${GREEN} Coloring HS raster wgs84$ {YELLOW}";
			gdaldem color-relief ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif ${FLIR2QR_PATH}/color_table.txt ${TEMP_PATH}/mga_50/${WILDFILE}_hs_z50.tif -alpha -exact_color_entry;
		echo -e "${GREEN} Deproject hotspot to wgs84 ${YELLOW}";
			gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 ${TEMP_PATH}/mga_50/${WILDFILE}_hs_z50.tif ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif -co COMPRESS=LZW -overwrite -ts $MAPSIZE -ot Byte;

		# prepare ir imagery
		echo -e "${GREEN}Stamping IR png CRS${YELLOW}";
			gdal_translate -a_srs EPSG:28350 ${TEMP_PATH}/raw/${WILDFILE}.png ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif -co COMPRESS=LZW -b 1 -b 1 -b 1 -b mask -a_nodata 0 -of GTiff;
			gdal_edit.py -colorinterp_1 red -colorinterp_2 green -colorinterp_3 blue -colorinterp_4 alpha ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif;
		echo -e "${GREEN}Convert HS raster wgs84${YELLOW}";
			gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif -co COMPRESS=LZW -overwrite -ts $MAPSIZE -ot Byte;
		echo -e "${GREEN}Scaling IR tif ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif ${YELLOW}";
			gdal_translate -a_srs EPSG:4326 ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif -scale 0 255 -co COMPRESS=LZW -a_nodata 0 -of GTiff -ot Byte;
		rm 	${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif;
		

		# create clip fence
		echo -e "${PURPLE}Creating clip fence${YELLOW}";
			echo -e "${GREEN}Reducing IR raster colours to make clip fence${YELLOW}";
				gdal_merge.py -co NBITS=1 -o ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif;
			echo -e "${GREEN}Polygonising IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${YELLOW}";
				gdal_polygonize.py ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${TEMP_PATH}/clipfence/${WILDFILE}_extent.shp clip;
		  	echo -e "${GREEN}Dissolving IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp${YELLOW}";
				ogr2ogr ${TEMP_PATH}/clipfence/${WILDFILE}_fence.shp ${TEMP_PATH}/clipfence/${WILDFILE}_extent.shp -dialect sqlite -sql "SELECT ST_Union(geometryProperty) FROM 'clip'";
			echo -e "${GREEN}Stamping IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_extent_wgs84.shp ${YELLOW}";
				ogr2ogr ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp ${TEMP_PATH}/clipfence/${WILDFILE}_fence.shp -overwrite -a_srs EPSG:4326;


		# Get Centroid and Bounding Box Corners
	  	NW=$(echo $(gdalinfo ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif | grep 'Upper Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	NE=$(echo $(gdalinfo ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif | grep 'Upper Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SW=$(echo $(gdalinfo ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif | grep 'Lower Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SE=$(echo $(gdalinfo ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif | grep 'Lower Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	centroid=$(echo $(gdalinfo ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif | grep Center |  grep -o '(.*).' | sed 's/[()]//g'));
	  	# Create corner coordinate text
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthWest label:"${NW}" png32:${TEMP_PATH}/label/${WILDFILE}_NW.png
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthEast label:"${NE}" png32:${TEMP_PATH}/label/${WILDFILE}_NE.png
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthWest label:"${SW}" png32:${TEMP_PATH}/label/${WILDFILE}_SW.png
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthEast label:"${SE}" png32:${TEMP_PATH}/label/${WILDFILE}_SE.png
		NW_label="${TEMP_PATH}/label/${WILDFILE}_NW.png";
		NE_label="${TEMP_PATH}/label/${WILDFILE}_NE.png";
		SW_label="${TEMP_PATH}/label/${WILDFILE}_SW.png";
		SE_label="${TEMP_PATH}/label/${WILDFILE}_SE.png";

		# cp ${TEMP_PATH}/label/${WILDFILE}* ${WWWPATH};

		# clip vector data
	  	echo -e "${PURPLE}Clipping vectors to IR fence${YELLOW}";
		  	echo -e "${GREEN}Clipping grid ${YELLOW}";
			  	ogr2ogr -clipsrc ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 ${TEMP_PATH}/grid/${WILDFILE}_grid.shp $GRIDFILE -a_srs EPSG:4326 -progress; 
			echo -e "${GREEN}Clipping roads ${YELLOW}";
				ogr2ogr -clipsrc ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 ${TEMP_PATH}/roads/${WILDFILE}_roads.shp $ROADSFILE -a_srs EPSG:4326 -progress;
				 
				#gdalwarp -cutline ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp -crop_to_cutline $ROADSFILE ${TEMP_PATH}/roads/${WILDFILE}_roads_temp.tif -co COMPRESS=LZW -dstnodata 0 -ot Byte -s_srs EPSG:4326 -t_srs EPSG:4326 -ts $MAPSIZE;		
				#gdal_translate -expand rgb ${TEMP_PATH}/roads/${WILDFILE}_roads_temp.tif ${TEMP_PATH}/roads/${WILDFILE}_roads.tif
		
		#convert clipped vectors to rasters
		echo -e "${PURPLE}Burning vectors to raster"; 
		  	echo -e "${GREEN}Burning grid ${TEMP_PATH}/grid/${WILDFILE}_grid.tif ${YELLOW} ${YELLOW}";
				gdal_rasterize -burn 10 -burn 250 -burn 250 -burn 255 -ts $MAPSIZE ${TEMP_PATH}/grid/${WILDFILE}_grid.shp ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif -co COMPRESS=LZW -init 0 -a_srs EPSG:4326 -ot Byte;
				gdal_edit.py -colorinterp_4 alpha ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif;
	  		echo -e "${GREEN}Burning roads ${TEMP_PATH}/roads/${WILDFILE}_roads.tif${YELLOW}";
				gdal_rasterize -burn 244 -burn 150 -burn 2 -burn 255 -ts $MAPSIZE ${TEMP_PATH}/roads/${WILDFILE}_roads.shp ${TEMP_PATH}/basemap/${WILDFILE}_roads_temp.tif -co COMPRESS=LZW -init 0 -a_srs EPSG:4326 -ot Byte;
				gdalwarp ${TEMP_PATH}/basemap/${WILDFILE}_roads_temp.tif ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif  -s_srs EPSG:4326 -t_srs EPSG:4326 -ts $MAPSIZE;
				gdal_edit.py -colorinterp_1 red -colorinterp_2 green -colorinterp_3 blue -colorinterp_4 alpha ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif;

		# Create VRTs for raster layers (this overcomes disk space processing issues)
		echo -e "${GREEN}Creating VRTs ${YELLOW}";
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_ir.vrt ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_hs.vrt ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_grid.vrt ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_roads.vrt ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif;

		
			# Merge raster layers and create PDF/TIF
			echo -e "${PURPLE}Merging rasters into final map ${YELLOW}";
				gdal_merge.py -o ${TEMP_PATH}/pdf/${WILDFILE}_merged.pdf ${TEMP_PATH}/vrt/${WILDFILE}_ir.vrt ${TEMP_PATH}/vrt/${WILDFILE}_roads.vrt ${TEMP_PATH}/vrt/${WILDFILE}_hs.vrt ${TEMP_PATH}/vrt/${WILDFILE}_grid.vrt -v -co COMPRESS=DEFLATE -co tiled=yes;
			echo -e "${PURPLE}Creating final PDF ${YELLOW}";
				gdal_translate ${TEMP_PATH}/pdf/${WILDFILE}_merged.pdf ${OUTPATH}/pdf/${WILDFILE}_merged.pdf -of PDF -a_srs EPSG:4326 -co EXTRA_IMAGES=$NW_label,10,1540,1,$NE_label,1500,1540,1,$SW_label,10,10,1,$SE_label,1500,10,1 -outsize $MAPSIZE;	
			echo -e "${PURPLE}Creating final TIF ${YELLOW}";
				gdal_translate ${OUTPATH}/pdf/${WILDFILE}_merged.pdf ${OUTPATH}/tif/${WILDFILE}_merged.tif -a_srs EPSG:4326 -co COMPRESS=LZW;

		
			
		
			# Moving output into www folders
			echo -e "${PURPLE}Adding ${OUTPATH}/tif/${WILDFILE}_merged.tif to ${WWWPATH}/ ${YELLOW}"; 
			cp -f ${OUTPATH}/tif/${WILDFILE}_merged.tif ${WWWPATH}/tif/${WILDFILE}_merged.tif;
			cp -f ${OUTPATH}/pdf/${WILDFILE}_merged.pdf ${WWWPATH}/pdf/${WILDFILE}_merged.pdf;
			
		  	echo -e "${PURPLE}Creating KMZ Overlay ${YELLOW}";
		  	gdal2tiles.py -k -t $2 ${OUTPATH}/tif/${WILDFILE}_merged.tif ${TEMP_PATH}/kmz/${WILDFILE}_merged.kml;
		  	cd ${TEMP_PATH}/kmz/${WILDFILE}_merged.kml;
		  	zip ${TEMP_PATH}/overlay/${WILDFILE}_overlay.zip . -r;
			mv -f ${TEMP_PATH}/overlay/${WILDFILE}_overlay.zip ${OUTPATH}/kmz/${WILDFILE}_overlay.kmz;
			cp -f ${OUTPATH}/kmz/${WILDFILE}_overlay.kmz ${WWWPATH}/kmz/${WILDFILE}_overlay.kmz;			

			echo -e "${PURPLE}generating QR code for http://$IP/flir2qr/${WILDFILE}.tif ${YELLOW}";
			qrencode -o ${OUTPATH}/qr/${WILDFILE}_merged_tif.png http://$IP/flir2qr/${z7_FILENAME}/tif/${WILDFILE}_merged.tif;
		  	qrencode -o ${OUTPATH}/qr/${WILDFILE}_merged_pdf.png http://$IP/flir2qr/${z7_FILENAME}/pdf/${WILDFILE}_merged.pdf;
		  	cp -f ${OUTPATH}/qr/* ${WWWPATH}/qr;
		  	cp -f $FLIR2QR_PATH/kml/template.kml ${OUTPATH}/kml/${WILDFILE}_qr.kml;


		  	echo -e "${PURPLE}Creating $WILDFILE centroid placemark at $centroid ${YELLOW}";

		  	sed -i 's/WILDFILE/'"$WILDFILE"'_merged_pdf.png/g' "${OUTPATH}"'/kml/'"${WILDFILE}"'_qr.kml';
		  	sed -i 's/CENTROID/'"$centroid"'/g' "${OUTPATH}"'/kml/'"${WILDFILE}"'_qr.kml';
		  	cd  ${OUTPATH}
		  	zip ${WILDFILE}_qr.zip ${OUTPATH}/kml/${WILDFILE}_qr.kml ${WWWPATH}/qr/${WILDFILE}_merged_pdf.png -j;
			mv -f ${WILDFILE}_qr.zip ${WWWPATH}/kmz/${WILDFILE}_qr.kmz;
		  	echo -e "${BLUE}moving files $2 complete! ${WHITE}";
			
			# clear temp data to create space 
			rm -Rf ${TEMP_PATH}/raw/${WILDFILE}.png;
			rm -Rf ${TEMP_PATH}/hotspot/${WILDFILE}.png;
			rm -Rf ${TEMP_PATH}/mga_50/*;
			rm -Rf ${TEMP_PATH}/clipfence/*;
			rm -Rf ${TEMP_PATH}/basemap/*;
			rm -Rf ${TEMP_PATH}/kmz/*;
			rm -Rf ${TEMP_PATH}/overlay/*;
			rm -Rf ${TEMP_PATH}/label/*;
		done
		echo -e "Processing $2 complete"'\r' >> $FLIR2QR_PATH/log/flir2qr.log;
		echo -e "${BLUE}Processing $2 complete! ${WHITE}";
		echo -e "${GREEN}Output data available at http://${IP}/flir2qr/${z7_FILENAME} ${WHITE}";
		
		rm -Rf ${WWWPATH}/kml;
		rm -Rf ${WWWPATH}/overlay;
		cp -f $FLIR2QR_PATH/log/* ${WWWPATH}/log;
		# Merging output for overview
		echo -e "Creating PDF overview"'\r' >> $FLIR2QR_PATH/log/flir2qr.log;
		gdalbuildvrt ${WWWPATH}/log/${WILDFILE}_combined.vrt ${OUTPATH}/tif/*.tif;
		gdal_merge.py -o ${WWWPATH}/pdf/${WILDFILE}_overview.pdf ${WWWPATH}/log/${WILDFILE}_combined.vrt -v -co COMPRESS=DEFLATE -co tiled=yes;
	  	#echo -e "${PURPLE}Creating KMZ ${YELLOW}";
	  	#gdal2tiles.py -k -t ${WWWPATH}/log/${WILDFILE}_combined.vrt ${WWWPATH}/log/${WILDFILE}_combined.kml;
	  	#cd ${WWWPATH}/log/${WILDFILE}_combined.kml;
	  	#zip ${WWWPATH}/log/${WILDFILE}_combined.zip . -r;
		#mv -f ${WWWPATH}/log/${WILDFILE}_combined.zip ${WWWPATH}/kmz/${z7_FILENAME}_combined.kmz;
		/home/$USER/email.notifiy.sh "Thermal flight ${z7_FILENAME} complete" "${WWWPATH}/pdf/${WILDFILE}_overview.pdf"
	 ;;
	*)
	  echo -e "${RED}Unexpected file type '$2'. 7z Archive Only! ${WHITE}";
	  echo "$timestamp - bad filetype uploaded - $2"$'\r' >> ${FLIR2QR_PATH}/log/error.log;
	;;
		
esac
		
