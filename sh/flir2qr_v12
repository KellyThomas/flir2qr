#!/bin/bash
# TO TEST - /opt/flir2qr/sh/flir2qr_v11 /opt/flir2qr FireFlight_20180601_121018.7z  
# TO TEST with logfile - /opt/flir2qr/sh/flir2qr_v11 /opt/flir2qr FireFlight_20180601_121018.7z > /var/www/html/flir2qr/logs/FireFlight_20180601_121018.log
# IN CASE OF PERMISSIONS ERRORS, CHECK README at https://github.com/smk762/flir2qr
RED='\033[1;0;31m';
WHITE='\033[1;37m';
BLUE='\033[1;34m';
GREEN='\033[0;32m';
YELLOW='\033[1;33m';
CYAN='\033[0;36m';
PURPLE='\033[1;35m';
RED='\033[1;0;31m';
timestamp=$(date +%F_%T);
IP="$(echo -e $(hostname -I) | tr -d '[:space:]')";
MAPWIDTH=2000
MAPHEIGHT=1600
MAPSIZE="$MAPWIDTH $MAPHEIGHT";
PIXELRANGE="0 8000";
startTime=$SECONDS;

# TODOs
echo 'reduce vector variable to folder';
echo 'create PDF before TIF';

# Set install and output paths
z7_FILENAME="${2%.*}";
FLIR2QR_PATH="/opt/flir2qr";
WWW_PATH="/var/www/html/flir2qr/${z7_FILENAME}";
OUTPATH="${FLIR2QR_PATH}/output/${z7_FILENAME}";

# Define vector layers
# ROADSFILE="$FLIR2QR_PATH/vectors/sample_roads_4m_buff.shp";
# shapefile clips fastest when buffered but not dissolved.
ROADSFILE="$FLIR2QR_PATH/vectors/rds_clip_oct2018_3m_wgs.shp";
GRIDFILE="$FLIR2QR_PATH/vectors/grid_clip_oct2018_1m_wgs.shp";

# Define legend and logo images (inactive at the moment)
LOGO="$FLIR2QR_PATH/img/logo.gif";
LEGEND="$FLIR2QR_PATH/img/legend.jpg";

# Create output folders for archiving and public transmission
rm -Rf ${WWW_PATH};
rm -Rf ${FLIR2QR_PATH}/output/${z7_FILENAME};

mkdir ${WWW_PATH};
mkdir ${FLIR2QR_PATH}/output/${z7_FILENAME};
	# create output subfolders
	declare -a OUTDIRS=('tif' 'qr' 'pdf' 'tif' 'kmz' 'log' 'kml' 'overview');
	for dir in "${OUTDIRS[@]}"; do  mkdir -p ${FLIR2QR_PATH}/output/${z7_FILENAME}/$dir; done
	for dir in "${OUTDIRS[@]}"; do  mkdir -p ${WWW_PATH}/$dir; done
	rm -rf ${WWW_PATH}/kml;

# process data if path/file parameters lead to a file
echo -e "Started processing $2 at $timestamp"                                 
if [ -e ${1}/${2} ]
  then echo -e "${BLUE}Uploaded zipfile $1/$2 detected";
  else echo -e "${RED}$timestamp - $2 does not exist, exiting.${WHITE}"$'\r'; echo -e "$timestamp - $2 does not exist, exiting.";
  exit 1; 
fi

echo -e "Checking for 7z archive";
case "$2" in
*.7z)
	# Create random temp folders for processing
	if [ -e ${FLIR2QR_PATH}/temp.txt ]
		then echo -e "${PURPLE}TempDir has already been spawned";
		else echo -e "$RANDOM" > "$FLIR2QR_PATH/temp.txt";
	fi
	TEMPDIR=$(cat $FLIR2QR_PATH/temp.txt);
	TEMP_PATH=$FLIR2QR_PATH/temp/$TEMPDIR;
	rm -Rf ${TEMP_PATH};
	echo -e "${PURPLE}Creating temporary folders in ${TEMP_PATH}";
	# create temp subfolders
	declare -a PROCDIRS=('raw' 'mga_50' 'wgs84' 'clipfence' 'hotspot' 'basemap' 'roads' 'kmz' 'kml' 'shp' 'grid' 'overlay' 'vrt' 'label' 'pdf');
	for dir in "${PROCDIRS[@]}"; do  mkdir -p ${TEMP_PATH}/$dir; done

	# unzip incoming data
	echo -e "Extracting archive";
	7z x $1/$2 -o${TEMP_PATH}
	echo -e "${GREEN}Copying PNGs${YELLOW}";
	mv ${TEMP_PATH}/$z7_FILENAME/HotSpots/*  ${TEMP_PATH}/hotspot;
	mv ${TEMP_PATH}/$z7_FILENAME/PNGs/*  ${TEMP_PATH}/raw;
	rm -Rf ${TEMP_PATH}/$z7_FILENAME;
	num_tiles=$(ls -l ${TEMP_PATH}/raw/*.png | wc -l);

	# Create CRS Labels
	WGS_label="WGS84";
	MGA_label="MGA Zone 50";
	convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity South label:"${MGA_label}" png32:${TEMP_PATH}/label/mga_label.png;
	convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity South label:"${WGS_label}" png32:${TEMP_PATH}/label/wgs84_label.png;
	mga_img="${TEMP_PATH}/label/mga_label.png";
	wgs_img="${TEMP_PATH}/label/wgs84_label.png";

	# Calculate label offsets
	wgs_Dim=($(gdalinfo $wgs_img | grep Size | sed 's/,//' | sed 's/Size is //'));
	wgs_width=$(echo ${wgs_Dim[0]});
	wgs_height=$(echo ${wgs_Dim[1]});

	mga_Dim=($(gdalinfo $mga_img | grep Size | sed 's/,//' | sed 's/Size is //'));
	mga_width=$(echo ${mga_Dim[0]});
	mga_height=$(echo ${mga_Dim[1]});

	mga_offset_bottom=$(echo $mga_height+wgs_height|bc);
	mga_offset_top=$(echo $MAPHEIGHT-$mga_height-$wgs_height|bc);
	mga_offset_left=5;
	mga_offset_h_center=$(printf "%.0f" $(echo $MAPWIDTH/2-$mga_width/2|bc));
	mga_offset_right=$(echo $MAPWIDTH-$mga_width*2|bc);
	wgs_offset_bottom=5;
	wgs_offset_top=$(echo $MAPHEIGHT-$wgs_height|bc);
	wgs_offset_left=5;
	wgs_offset_h_center=$(printf "%.0f" $(echo $MAPWIDTH/2-$wgs_width/2|bc));
	wgs_offset_right=$(echo $MAPWIDTH-$wgs_width*4|bc);

	CRS_labels="$mga_img,$mga_offset_h_center,$mga_offset_bottom,1";
	CRS_labels+=",$wgs_img,$wgs_offset_h_center,$wgs_offset_bottom,1";

	i=0;
	# process all pngs
	for filename in ${TEMP_PATH}/raw/*.png; do
		((i=i+1));
		#if [[ $i -gt 4 ]]; then
		#	break
		#fi
		procTime=$SECONDS;
		fname=$(basename "$filename");
		WILDFILE=${fname%.*};
		echo -e "${PURPLE}Processing $fname ($i/$num_tiles) ${YELLOW}";
		# Create Map Title
		convert -background none -fill CornflowerBlue -font "DejaVu-Sans" -pointsize 60 -gravity North label:"TILE: ${WILDFILE}.PNG" png32:${TEMP_PATH}/label/${WILDFILE}_title.png;
		tile_img="${TEMP_PATH}/label/${WILDFILE}_title.png";
		title_Dim=($(gdalinfo ${TEMP_PATH}/label/${WILDFILE}_title.png | grep Size | sed 's/,//' | sed 's/Size is //'));
		title_width=$(echo ${title_Dim[0]})
		title_height=$(echo ${title_Dim[1]})
		title_x=$(printf "%.0f" $(echo $MAPWIDTH/2-$title_width/2|bc));
		title_y=$(echo $MAPHEIGHT-$title_height-10|bc);
		title_label=",$tile_img,$title_x,$title_y,1";

		# prepare hotspots
		echo -e "${GREEN} Set Hotspot coords to MGA zone 50 ${YELLOW}";
		gdal_translate -a_srs EPSG:28350 ${TEMP_PATH}/hotspot/${WILDFILE}.png ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif -co COMPRESS=DEFLATE -b 1 -a_nodata 0 -of GTiff;
		echo -e "${GREEN} Coloring HS raster wgs84$ {YELLOW}";
		gdaldem color-relief ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif ${FLIR2QR_PATH}/color_table.txt ${TEMP_PATH}/mga_50/${WILDFILE}_hs_z50.tif -alpha -exact_color_entry;
		echo -e "${GREEN} Deproject hotspot to wgs84 ${YELLOW}";
		gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 ${TEMP_PATH}/mga_50/${WILDFILE}_hs_z50.tif ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif -co COMPRESS=DEFLATE -overwrite -ts $MAPSIZE -ot Byte;

		# Get WGS84 corner coords 
	  	NW=$(echo $(gdalinfo ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif | grep 'Upper Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	NE=$(echo $(gdalinfo ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif | grep 'Upper Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SW=$(echo $(gdalinfo ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif | grep 'Lower Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SE=$(echo $(gdalinfo ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif | grep 'Lower Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	centroid=$(echo $(gdalinfo ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif | grep Center |  grep -o '(.*).' | sed 's/[()]//g'));
	  	# Create WGS labels
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthWest label:"${NW}" png32:${TEMP_PATH}/label/${WILDFILE}_NW_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthEast label:"${NE}" png32:${TEMP_PATH}/label/${WILDFILE}_NE_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthWest label:"${SW}" png32:${TEMP_PATH}/label/${WILDFILE}_SW_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthEast label:"${SE}" png32:${TEMP_PATH}/label/${WILDFILE}_SE_wgs.png;
		NW_wgs="${TEMP_PATH}/label/${WILDFILE}_NW_wgs.png";
		NE_wgs="${TEMP_PATH}/label/${WILDFILE}_NE_wgs.png";
		SW_wgs="${TEMP_PATH}/label/${WILDFILE}_SW_wgs.png";
		SE_wgs="${TEMP_PATH}/label/${WILDFILE}_SE_wgs.png";
		wgs_labels="$NW_wgs,$wgs_offset_left,$wgs_offset_top,1";
		wgs_labels+=",$NE_wgs,$wgs_offset_right,$wgs_offset_top,1";
		wgs_labels+=",$SW_wgs,$wgs_offset_left,$wgs_offset_bottom,1";
		wgs_labels+=",$SE_wgs,$wgs_offset_right,$wgs_offset_bottom,1";

		# Define bounding box
		ul=($(echo $NW|sed 's/,//'));
		ulx=$(echo ${ul[0]});
		uly=$(echo ${ul[1]});
		lr=($(echo $SE|sed 's/,//'));
		lrx=$(echo ${lr[0]});
		lry=$(echo ${lr[1]});

		# Get MGA corner coords - Only Zone 50 at the moment
	  	NW_mga=$(echo $(gdalinfo ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif | grep 'Upper Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	NE_mga=$(echo $(gdalinfo ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif | grep 'Upper Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SW_mga=$(echo $(gdalinfo ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif | grep 'Lower Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SE_mga=$(echo $(gdalinfo ${TEMP_PATH}/mga_50/${WILDFILE}_hs.tif | grep 'Lower Right' |  grep -o '(.*).' | sed 's/[()]//g'));

	  	#Create MGA labels
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity NorthWest label:"${NW_mga}" png32:${TEMP_PATH}/label/${WILDFILE}_NW_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity NorthEast label:"${NE_mga}" png32:${TEMP_PATH}/label/${WILDFILE}_NE_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity SouthWest label:"${SW_mga}" png32:${TEMP_PATH}/label/${WILDFILE}_SW_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity SouthEast label:"${SE_mga}" png32:${TEMP_PATH}/label/${WILDFILE}_SE_mga.png;
		NW_mga="${TEMP_PATH}/label/${WILDFILE}_NW_mga.png";
		NE_mga="${TEMP_PATH}/label/${WILDFILE}_NE_mga.png";
		SW_mga="${TEMP_PATH}/label/${WILDFILE}_SW_mga.png";
		SE_mga="${TEMP_PATH}/label/${WILDFILE}_SE_mga.png";
		mga_labels="$NW_mga,$mga_offset_left,$mga_offset_top,1";
		mga_labels+=",$NE_mga,$mga_offset_right,$mga_offset_top,1";
		mga_labels+=",$SW_mga,$mga_offset_left,$mga_offset_bottom,1";
		mga_labels+=",$SE_mga,$mga_offset_right,$mga_offset_bottom,1";


		# prepare ir imagery
		echo -e "${GREEN}Stamping IR png CRS${YELLOW}";
			gdal_translate -a_srs EPSG:28350 ${TEMP_PATH}/raw/${WILDFILE}.png ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif -co COMPRESS=DEFLATE -b 1 -b 1 -b 1 -b mask -a_nodata 0 -of GTiff;
			gdal_edit.py -colorinterp_1 red -colorinterp_2 green -colorinterp_3 blue -colorinterp_4 alpha ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif;
		echo -e "${GREEN}Convert HS raster wgs84${YELLOW}";
			gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 ${TEMP_PATH}/mga_50/${WILDFILE}_ir_z50.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif -co COMPRESS=DEFLATE -overwrite -ts $MAPSIZE -ot Byte;
		echo -e "${GREEN}Scaling IR tif ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif ${YELLOW}";
			gdal_translate -a_srs EPSG:4326 ${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif -scale 0 255 -co COMPRESS=DEFLATE -a_nodata 0 -of GTiff -ot Byte;
		

		# create clip fence
		echo -e "${PURPLE}Creating clip fence${YELLOW}";
			echo -e "${GREEN}Reducing IR raster colours to make clip fence${YELLOW}";
				gdal_merge.py -co NBITS=1 -o ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif;
			echo -e "${GREEN}Polygonising IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${YELLOW}";
				gdal_polygonize.py ${TEMP_PATH}/clipfence/${WILDFILE}_extent.tif ${TEMP_PATH}/clipfence/${WILDFILE}_extent.shp clip;
		  	echo -e "${GREEN}Dissolving IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp${YELLOW}";
				ogr2ogr ${TEMP_PATH}/clipfence/${WILDFILE}_fence.shp ${TEMP_PATH}/clipfence/${WILDFILE}_extent.shp -dialect sqlite -sql "SELECT ST_Union(geometryProperty) FROM 'clip'";
			echo -e "${GREEN}Stamping IR clip fence ${TEMP_PATH}/clipfence/${WILDFILE}_extent_wgs84.shp ${YELLOW}";
				ogr2ogr ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp ${TEMP_PATH}/clipfence/${WILDFILE}_fence.shp -overwrite -a_srs EPSG:4326;

#		GET OSM TILE
#		cp /opt/flir2qr/osm/OSM_tiles.xml ${TEMP_PATH}/${WILDFILE}_OSM.xml
#		thisTile=$(<${TEMP_PATH}/${WILDFILE}_OSM.xml)
#		echo $thisTile | sed "s/ulx/$ulx/" | sed "s/uly/$uly/" | sed "s/lrx/$lrx/" | sed "s/lry/$lry/"  > ${TEMP_PATH}/${WILDFILE}_OSM.xml
#		gdal_translate -of png -outsize 512 512 "${TEMP_PATH}/${WILDFILE}_OSM.xml" "/var/www/html/flir2qr/logs/${WILDFILE}_OSM.png"
#		cp "${TEMP_PATH}/${WILDFILE}_OSM.xml" "/var/www/html/flir2qr/logs/${WILDFILE}_OSM.xml"
		# clip vector data
	  	echo -e "${PURPLE}Clipping vectors to IR fence${YELLOW}";
		  	echo -e "${GREEN}Clipping grid ${YELLOW}";
			  	ogr2ogr -clipsrc ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 ${TEMP_PATH}/grid/${WILDFILE}_grid.shp $GRIDFILE -a_srs EPSG:4326 -progress; 
		  	echo -e "${GREEN}Burning grid ${TEMP_PATH}/grid/${WILDFILE}_grid.tif ${YELLOW} ${YELLOW}";
				gdal_rasterize -te $ulx $lry $lrx $uly -burn 10 -burn 250 -burn 250 -burn 255 -ts $MAPSIZE ${TEMP_PATH}/grid/${WILDFILE}_grid.shp ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif -co COMPRESS=DEFLATE -init 0 -a_srs EPSG:4326 -ot Byte;
				gdal_edit.py -colorinterp_4 alpha ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif;
				
rm 	${TEMP_PATH}/basemap/${WILDFILE}_ir_wgs84.tif;
		
			echo -e "${GREEN}Clipping roads ${YELLOW}";
				ogr2ogr -clipsrc ${TEMP_PATH}/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 ${TEMP_PATH}/roads/${WILDFILE}_roads.shp $ROADSFILE -progress;
				 
		#convert clipped vectors to rasters
		echo -e "${PURPLE}Burning vectors to raster"; 
	  		echo -e "${GREEN}Burning roads ${TEMP_PATH}/roads/${WILDFILE}_roads.tif${YELLOW}";
				gdal_rasterize -te $ulx $lry $lrx $uly -burn 24 -burn 150 -burn 2 -burn 255 -ts $MAPSIZE ${TEMP_PATH}/roads/${WILDFILE}_roads.shp ${TEMP_PATH}/basemap/${WILDFILE}_roads_NS.tif -co COMPRESS=DEFLATE -init 0 -a_srs EPSG:4326 -ot Byte;
				gdal_edit.py -colorinterp_1 red -colorinterp_2 green -colorinterp_3 blue -colorinterp_4 alpha ${TEMP_PATH}/basemap/${WILDFILE}_roads_NS.tif;
				 gdalwarp -t_srs EPSG:4326 ${TEMP_PATH}/basemap/${WILDFILE}_roads_NS.tif ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif;
				# gdal_translate -a_ullr $ulx $uly $lrx $lry ${TEMP_PATH}/basemap/${WILDFILE}_roads_NS.tif ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif
		# Create VRTs for raster layers (this overcomes disk space processing issues)
		echo -e "${GREEN}Creating VRTs ${YELLOW}";
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_ir.vrt ${TEMP_PATH}/basemap/${WILDFILE}_ir.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_hs.vrt ${TEMP_PATH}/basemap/${WILDFILE}_hs.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_grid.vrt ${TEMP_PATH}/basemap/${WILDFILE}_grid.tif;
				gdalbuildvrt ${TEMP_PATH}/vrt/${WILDFILE}_roads.vrt ${TEMP_PATH}/basemap/${WILDFILE}_roads.tif;

			# Merge raster layers and create PDF/TIF
			echo -e "${PURPLE}Merging rasters ${YELLOW}";
				echo -e "${PURPLE}Creating ${WILDFILE} TIF for ${WILDFILE}.tif ${YELLOW}";
				gdal_merge.py -o ${OUTPATH}/tif/${WILDFILE}_merged.tif ${TEMP_PATH}/vrt/${WILDFILE}_ir.vrt ${TEMP_PATH}/vrt/${WILDFILE}_roads.vrt ${TEMP_PATH}/vrt/${WILDFILE}_hs.vrt ${TEMP_PATH}/vrt/${WILDFILE}_grid.vrt -co COMPRESS=DEFLATE -co tiled=yes;
			#gdal_translate ${OUTPATH}/tif/${WILDFILE}_merged.tif ${OUTPATH}/pdf/${WILDFILE}_unlabelled.pdf -a_srs EPSG:4326 -co COMPRESS=DEFLATE;
			echo -e "${PURPLE}Creating ${WILDFILE} PDF for ${WILDFILE}.tif ${YELLOW}";
				extra_images="$LEGEND,5,110,1,$CRS_labels,$mga_labels,$wgs_labels,$title_label";
				gdal_translate ${OUTPATH}/tif/${WILDFILE}_merged.tif ${OUTPATH}/pdf/${WILDFILE}_merged.pdf -of PDF -a_srs EPSG:4326 -co EXTRA_IMAGES=$extra_images -outsize $MAPSIZE;	

		#	gdal_translate ${OUTPATH}/tif/${WILDFILE}_merged.tif ${OUTPATH}/pdf/${WILDFILE}_merged.pdf -of PDF -a_srs EPSG:4326 -co EXTRA_IMAGES=$LEGEND,5,85,1 -outsize $MAPSIZE;
			
		
			# Moving output into www folders
			echo -e "${PURPLE}Adding ${OUTPATH}/tif/${WILDFILE}_merged.tif to ${WWW_PATH}/ ${YELLOW}"; 
			cp -f ${OUTPATH}/tif/${WILDFILE}_merged.tif ${WWW_PATH}/tif/${WILDFILE}_merged.tif;
			cp -f ${OUTPATH}/pdf/${WILDFILE}_merged.pdf ${WWW_PATH}/pdf/${WILDFILE}_merged.pdf;
			
		  	echo -e "${PURPLE}Creating KMZ Tile Overlay for ${WILDFILE}.tif ${YELLOW}";
		  	gdal2tiles.py -q -k -t $2 ${OUTPATH}/tif/${WILDFILE}_merged.tif ${TEMP_PATH}/kmz/${WILDFILE}_merged.kml;
		  	cd ${TEMP_PATH}/kmz/${WILDFILE}_merged.kml;
		  	zip ${TEMP_PATH}/overlay/${WILDFILE}_overlay.zip . -r -q;
			mv -f ${TEMP_PATH}/overlay/${WILDFILE}_overlay.zip ${OUTPATH}/kmz/${WILDFILE}_overlay.kmz;
			cp -f ${OUTPATH}/kmz/${WILDFILE}_overlay.kmz ${WWW_PATH}/kmz/${WILDFILE}_overlay.kmz;			

			echo -e "${PURPLE}generating QR code for ${WILDFILE}.tif ${YELLOW}";
			qrencode -o ${OUTPATH}/qr/${WILDFILE}_merged_tif.png http://$IP/flir2qr/${z7_FILENAME}/tif/${WILDFILE}_merged.tif;
		  	qrencode -o ${OUTPATH}/qr/${WILDFILE}_merged_pdf.png http://$IP/flir2qr/${z7_FILENAME}/pdf/${WILDFILE}_merged.pdf;
		  	cp -f ${OUTPATH}/qr/* ${WWW_PATH}/qr;
		  	cp -f $FLIR2QR_PATH/kml/template.kml ${OUTPATH}/kml/${WILDFILE}_qr.kml;


		  	echo -e "${PURPLE}Creating $WILDFILE centroid placemark at $centroid ${YELLOW}";

		  	sed -i 's/WILDFILE/'"$WILDFILE"'_merged_pdf.png/g' "${OUTPATH}"'/kml/'"${WILDFILE}"'_qr.kml';
		  	sed -i 's/CENTROID/'"$centroid"'/g' "${OUTPATH}"'/kml/'"${WILDFILE}"'_qr.kml';
		  	cd  ${OUTPATH};
		  	zip ${WILDFILE}_qr.zip ${OUTPATH}/kml/${WILDFILE}_qr.kml ${WWW_PATH}/qr/${WILDFILE}_merged_pdf.png -j;
			mv -f ${WILDFILE}_qr.zip ${WWW_PATH}/kmz/${WILDFILE}_qr.kmz;			
			
			# clear temp data to create space 
			rm -Rf ${TEMP_PATH}/raw/${WILDFILE}.png;
			rm -Rf ${TEMP_PATH}/hotspot/${WILDFILE}.png;
			rm -Rf ${TEMP_PATH}/mga_50/*;
			rm -Rf ${TEMP_PATH}/clipfence/*;
			rm -Rf ${TEMP_PATH}/basemap/*;
			rm -Rf ${TEMP_PATH}/kmz/*;
			rm -Rf ${TEMP_PATH}/overlay/*;
			
			runTime=$(echo $SECONDS/60-$startTime/60|bc);
			procTime=$(echo $SECONDS-$procTime|bc);
			echo "Tile processed in $procTime seconds. Script runtime is $runTime minutes";
		done
		
		# Merging output for overview
		echo -e "${PURPLE}Creating TIF overview ${YELLOW}";
		
		gdal_merge.py -o ${WWW_PATH}/overview/overview.tif $(ls ${WWW_PATH}/tif/*_merged.tif)  -co COMPRESS=DEFLATE -co tiled=yes;

		# Get Overview dimensions
		ov_Dim=($(gdalinfo ${WWW_PATH}/overview/overview.tif | grep Size | sed 's/,//' | sed 's/Size is //'));
		#MAPWIDTH=$(echo ${ov_Dim[0]})
		#MAPHEIGHT=$(echo ${ov_Dim[1]})
		MAPWIDTH=5000;
		MAPHEIGHT=4000;
		MAPSIZE="$MAPWIDTH $MAPHEIGHT";

		gdalwarp -s_srs EPSG:4326 -t_srs EPSG:28350 ${WWW_PATH}/overview/overview.tif ${WWW_PATH}/overview/overview_z50.tif -co COMPRESS=DEFLATE -overwrite -ts $MAPSIZE -ot Byte;
		gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 ${WWW_PATH}/overview/overview_z50.tif ${WWW_PATH}/overview/overview.tif -co COMPRESS=DEFLATE -overwrite -ts $MAPSIZE -ot Byte;
 
		# Create CRS Labels and Title
		WGS_label="WGS84";
		MGA_label="MGA Zone 50";
		title_txt="MISSION: ${z7_FILENAME}";
		convert -background none -fill CornflowerBlue -font "DejaVu-Sans" -pointsize 60 -gravity North label:"${title_txt}" png32:${TEMP_PATH}/label/${z7_FILENAME}_title.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity South label:"${MGA_label}" png32:${TEMP_PATH}/label/mga_label.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity South label:"${WGS_label}" png32:${TEMP_PATH}/label/wgs84_label.png;
		mga_img="${TEMP_PATH}/label/mga_label.png";
		wgs_img="${TEMP_PATH}/label/wgs84_label.png";
		title_img="${TEMP_PATH}/label/${z7_FILENAME}_title.png";

		# Calculate label offsets
		title_Dim=($(gdalinfo ${TEMP_PATH}/label/${z7_FILENAME}_title.png | grep Size | sed 's/,//' | sed 's/Size is //'));
		title_width=$(echo ${title_Dim[0]});
		title_height=$(echo ${title_Dim[1]});

		mga_Dim=($(gdalinfo $mga_img | grep Size | sed 's/,//' | sed 's/Size is //'));
		mga_width=$(echo ${mga_Dim[0]});
		mga_height=$(echo ${mga_Dim[1]});

		wgs_Dim=($(gdalinfo $wgs_img | grep Size | sed 's/,//' | sed 's/Size is //'));
		wgs_width=$(echo ${wgs_Dim[0]});
		wgs_height=$(echo ${wgs_Dim[1]});

		title_offset_bottom=$(echo $title_height|bc);
		title_offset_top=$(echo $MAPHEIGHT-$title_height|bc);
		title_offset_left=5;
		title_offset_h_center=$(printf "%.0f" $(echo $MAPWIDTH/2-$title_width/2|bc));
		title_offset_right=$(echo $MAPWIDTH-$title_width*2|bc);

		mga_offset_bottom=$(echo $mga_height+wgs_height|bc);
		mga_offset_top=$(echo $MAPHEIGHT-$mga_height-$wgs_height|bc);
		mga_offset_left=5;
		mga_offset_h_center=$(printf "%.0f" $(echo $MAPWIDTH/2-$mga_width/2|bc));
		mga_offset_right=$(echo $MAPWIDTH-$mga_width*2|bc);

		wgs_offset_bottom=5;
		wgs_offset_top=$(echo $MAPHEIGHT-$wgs_height|bc);
		wgs_offset_left=5;
		wgs_offset_h_center=$(printf "%.0f" $(echo $MAPWIDTH/2-$wgs_width/2|bc));
		wgs_offset_right=$(echo $MAPWIDTH-$wgs_width*4|bc);

		title_x=$(printf "%.0f" $(echo $MAPWIDTH/2-$title_width/2|bc));
		title_y=$(echo $MAPHEIGHT-$title_height-10|bc);
		title_label=",$tile_img,$title_x,$title_y,1";

		CRS_labels="$title_img,$title_offset_h_center,$title_offset_top,1";
		CRS_labels+=",$mga_img,$mga_offset_h_center,$mga_offset_bottom,1";
		CRS_labels+=",$wgs_img,$wgs_offset_h_center,$wgs_offset_bottom,1";

		ov_wgs_tif="${WWW_PATH}/overview/overview.tif";
		# Get WGS84 corner coords 
	  	NW_ov_wgs=$(echo $(gdalinfo $ov_wgs_tif | grep 'Upper Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	NE_ov_wgs=$(echo $(gdalinfo $ov_wgs_tif | grep 'Upper Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SW_ov_wgs=$(echo $(gdalinfo $ov_wgs_tif | grep 'Lower Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SE_ov_wgs=$(echo $(gdalinfo $ov_wgs_tif | grep 'Lower Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	centroid_ov_wgs=$(echo $(gdalinfo $ov_wgs_tif | grep Center |  grep -o '(.*).' | sed 's/[()]//g'));
	  	# Create WGS labels
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthWest label:"${NW_ov_wgs}" png32:${TEMP_PATH}/label/NW_ov_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity NorthEast label:"${NE_ov_wgs}" png32:${TEMP_PATH}/label/NE_ov_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthWest label:"${SW_ov_wgs}" png32:${TEMP_PATH}/label/SW_ov_wgs.png;
		convert -background none -fill green -font "DejaVu-Sans" -pointsize 36 -gravity SouthEast label:"${SE_ov_wgs}" png32:${TEMP_PATH}/label/SE_ov_wgs.png;
		NW_ov_wgs_img="${TEMP_PATH}/label/NW_ov_wgs.png";
		NE_ov_wgs_img="${TEMP_PATH}/label/NE_ov_wgs.png";
		SW_ov_wgs_img="${TEMP_PATH}/label/SW_ov_wgs.png";
		SE_ov_wgs_img="${TEMP_PATH}/label/SE_ov_wgs.png";
		labels_ov_wgs="$NW_ov_wgs_img,$wgs_offset_left,$wgs_offset_top,1";
		labels_ov_wgs+=",$NE_ov_wgs_img,$wgs_offset_right,$wgs_offset_top,1";
		labels_ov_wgs+=",$SW_ov_wgs_img,$wgs_offset_left,$wgs_offset_bottom,1";
		labels_ov_wgs+=",$SE_ov_wgs_img,$wgs_offset_right,$wgs_offset_bottom,1";

		# Define bounding box
		ul=($(echo $NW_ov_wgs|sed 's/,//'));
		ulx=$(echo ${ul[0]});
		uly=$(echo ${ul[1]});
		lr=($(echo $SE_ov_wgs|sed 's/,//'));
		lrx=$(echo ${lr[0]});
		lry=$(echo ${lr[1]});

		ov_mga_tif="${WWW_PATH}/overview/overview_z50.tif";
		# Get mga corner coords 
	  	NW_ov_mga=$(echo $(gdalinfo $ov_mga_tif | grep 'Upper Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	NE_ov_mga=$(echo $(gdalinfo $ov_mga_tif | grep 'Upper Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SW_ov_mga=$(echo $(gdalinfo $ov_mga_tif | grep 'Lower Left' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	SE_ov_mga=$(echo $(gdalinfo $ov_mga_tif | grep 'Lower Right' |  grep -o '(.*).' | sed 's/[()]//g'));
	  	centroid_ov_mga=$(echo $(gdalinfo $ov_mga_tif | grep Center |  grep -o '(.*).' | sed 's/[()]//g'));
	  	# Create mga labels
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity NorthWest label:"${NW_ov_mga}" png32:${TEMP_PATH}/label/NW_ov_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity NorthEast label:"${NE_ov_mga}" png32:${TEMP_PATH}/label/NE_ov_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity SouthWest label:"${SW_ov_mga}" png32:${TEMP_PATH}/label/SW_ov_mga.png;
		convert -background none -fill DeepSkyBlue3 -font "DejaVu-Sans" -pointsize 36 -gravity SouthEast label:"${SE_ov_mga}" png32:${TEMP_PATH}/label/SE_ov_mga.png;
		NW_ov_mga_img="${TEMP_PATH}/label/NW_ov_mga.png";
		NE_ov_mga_img="${TEMP_PATH}/label/NE_ov_mga.png";
		SW_ov_mga_img="${TEMP_PATH}/label/SW_ov_mga.png";
		SE_ov_mga_img="${TEMP_PATH}/label/SE_ov_mga.png";
		labels_ov_mga="$NW_ov_mga_img,$mga_offset_left,$mga_offset_top,1";
		labels_ov_mga+=",$NE_ov_mga_img,$mga_offset_right,$mga_offset_top,1";
		labels_ov_mga+=",$SW_ov_mga_img,$mga_offset_left,$mga_offset_bottom,1";
		labels_ov_mga+=",$SE_ov_mga_img,$mga_offset_right,$mga_offset_bottom,1";


		gdalbuildvrt ${TEMP_PATH}/${WILDFILE}_overview.vrt ${WWW_PATH}/overview/overview.tif;
		
		#gdal_translate ${WWW_PATH}/overview/overview.tif ${WWW_PATH}/overview/overview.pdf -a_srs EPSG:4326 -co COMPRESS=DEFLATE -of PDF -co DPI=100;

		extra_images="$LEGEND,5,110,1,$CRS_labels,$labels_ov_mga,$labels_ov_wgs";
		echo $extra_images;
		gdal_translate ${TEMP_PATH}/${WILDFILE}_overview.vrt ${WWW_PATH}/overview/overview.pdf -a_srs EPSG:4326 -co COMPRESS=DEFLATE -of PDF -co EXTRA_IMAGES=$extra_images -outsize $MAPSIZE;

		echo -e "${PURPLE}Creating Bing overview";
		gdal2tiles.py -q -k -t $2 -b Ag4sqB8_1kZH0Uqc4M1kZeN1hoWHTvmv-cv7PR_YO04PKMvevlYzKyLEcEuy_j_J ${TEMP_PATH}/${WILDFILE}_overview.vrt ${WWW_PATH}/overview/map;
		mv ${WWW_PATH}/overview/map/openlayers.html ${WWW_PATH}/overview/map/index.html;

		slippy=${WWW_PATH}/overview/map/index.html;
		sed -i 's/broad, baer, bhyb,//' "$slippy";
		sed -i 's/osm, tmsoverlay]);//' "$slippy";
		sed -i 's/gmap, gsat, ghyb, gter,/bhyb, broad, baer, tmsoverlay]);/' "$slippy";
		
 		echo -e "${PURPLE}Creating KMZ Overview Overlay ${YELLOW}";
		  	gdal2tiles.py -q -k -t $2 ${TEMP_PATH}/${WILDFILE}_overview.vrt ${TEMP_PATH}/kmz/overview.kml;
		  	cd ${TEMP_PATH}/kmz/overview.kml;
		  	zip ${TEMP_PATH}/overlay/overview.zip . -r -q;
			mv -f ${TEMP_PATH}/overlay/overview.zip ${OUTPATH}/kmz/overview.kmz;
			cp -f ${OUTPATH}/kmz/overview.kmz ${WWW_PATH}/overview/overview.kmz;


		echo -e "Processing $2 complete"
		echo -e "${BLUE}Processing $2 complete! ${WHITE}";
		echo -e "${GREEN}Output data available at http://${IP}/flir2qr/${z7_FILENAME} ${WHITE}";
		
		
		echo -e "${PURPLE}generating QR code for overviews ${YELLOW}";
		qrencode -o ${OUTPATH}/qr/${WILDFILE}_overview_tif.png http://$IP/flir2qr/${z7_FILENAME}/overview/overview.tif;
	  	qrencode -o ${OUTPATH}/qr/${WILDFILE}_overview_pdf.png http://$IP/flir2qr/${z7_FILENAME}/overview/overview.pdf;

		rm -Rf ${WWW_PATH}/overlay;
		cp -f $FLIR2QR_PATH/log/${WILDFILE}.log ${WWW_PATH}/log/${WILDFILE}.log;

		endTime="$SECONDS";
		qrencode -o ${WWW_PATH}/qr/mission.png http://$IP/flir2qr/${z7_FILENAME}/;
		/home/$USER/emailnotifiy.sh "Thermal flight ${z7_FILENAME} complete" "${WWW_PATH}/qr/mission.png" "http://kens-therm-001/flir2qr/${z7_FILENAME}";
	 
	 	#Setup GUI
	 	cp -r /opt/flir2qr/html/* ${WWW_PATH};
	 	HTTP_PATH=http://${IP}/flir2qr/${z7_FILENAME};
	 	gui="${WWW_PATH}/index.html";
		sed -i 's=WEBMAPLINK='"${HTTP_PATH}"'\/overview\/map\/=' "$gui";
		sed -i 's=PDFLINK='"${HTTP_PATH}"'\/pdf\/=' "$gui";
		sed -i 's=TIFLINK='"${HTTP_PATH}"'\/tif\/=' "$gui";
		sed -i 's=KMZLINK='"${HTTP_PATH}"'\/kmz\/=' "$gui";
		sed -i 's=OVERVIEWLINK='"${HTTP_PATH}"'\/overview\/=' "$gui";
		
		echo "GUI updated";
		runTime=$(echo $endTime/60-$startTime/60|bc)
		echo "Script completed in $runTime minutes";
		rm -Rf ${TEMP_PATH}/label/*;
	 ;;
	*)
	  echo -e "${RED}Unexpected file type '$2'. 7z Archive Only! ${WHITE}";
	  echo "$timestamp - bad filetype uploaded - $2"$'\r' >> ${FLIR2QR_PATH}/log/error.log;
	;;
esac
		echo $slippy
