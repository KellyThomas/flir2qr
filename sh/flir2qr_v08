#!/bin/bash
RED='\033[1;0;31m';
WHITE='\033[1;37m';
BLUE='\033[1;34m';
GREEN='\033[0;32m';
YELLOW='\033[1;33m';
CYAN='\033[0;36m';
PURPLE='\033[1;35m';
RED='\033[1;0;31m';
FLIR2QR_PATH="$(dirname $1)";
timestamp=$(date +%F_%T);
IP="$(echo -e $(hostname -I) | tr -d '[:space:]')";
ROADSFILE="$FLIR2QR_PATH/vectors/sample_roads_4m_buff.shp";
GRIDFILE="$FLIR2QR_PATH/vectors/100m_grid_wgs84_1m_buff.shp";
z7_FILENAME="${2%.*}";
MAPSIZE="4000 3200";
PIXELRANGE="0 8000";
LOGO="$FLIR2QR_PATH/img/logo.gif";
LEGEND="$FLIR2QR_PATH/img/legend.jpg";
WWWPATH="/var/www/html/flir2qr";
OUTPATH="/var/www/html/flir2qr";
echo 'to do: use prj files to derive EPSG';




if [ -e ${1}/${2} ]
  then echo -e "${BLUE}Uploaded zipfile $1/$2 detected";
  else echo -e "${RED}$timestamp - $2 does not exist, exiting.${WHITE}"$'\r'; echo -e "$timestamp - $2 does not exist, exiting."$'\r' >> $FLIR2QR_PATH/log/error.log; exit 1; 
fi;
echo -e "${PURPLE}flir2qr path is $FLIR2QR_PATH";
echo -e "Started processing $2 at $timestamp"$'\r' >> $FLIR2QR_PATH/log/flir2qr.log;
if [ -e ${FLIR2QR_PATH}/temp.txt ]
	then echo -e "${PURPLE}TempDir has already been spawned";
	else echo -e "$RANDOM" > "$FLIR2QR_PATH/temp.txt";
fi
TEMPDIR=$(cat $FLIR2QR_PATH/temp.txt);
TEMP_PATH=$FLIR2QR_PATH/temp/$TEMPDIR;
echo -e "${PURPLE}Creating temporary folders in $TEMP_PATH";
declare -a PROCDIRS=('raw' 'mga_50' 'wgs84' 'clipfence' 'hotspot' 'basemap' 'roads' 'kmz' 'kml' 'shp' 'grid');
for dir in "${PROCDIRS[@]}"; do  mkdir -p $TEMP_PATH/$dir; done
echo -e "${PURPLE}IP address is ${IP}";
echo -e "${PURPLE}Processing $2 at $timestamp";

echo -e "Checking for 7z archive";
case "$2" in
*.7z)
	echo -e "Extracting archive";
	7z x $1/$2 -o$TEMP_PATH
	echo -e "${GREEN}Copying PNGs${YELLOW}";
	cp $TEMP_PATH/$z7_FILENAME/HotSpots/*  $TEMP_PATH/hotspot
	cp $TEMP_PATH/$z7_FILENAME/PNGs/*  $TEMP_PATH/raw
	echo -e "CHECKING FOR REQUIRED FILES";
	for filename in $TEMP_PATH/raw/*.png; do
		fname=$(basename "$filename")
		echo -e "${PURPLE}Processing $filename ${YELLOW}";
		echo -e "${GREEN}Stamping IR png CRS${YELLOW}";
		WILDFILE="${fname%.*}";

		# Convert Hotspot and IR PNG files into GeoTiffs with 256 colour depth in WGS84 CRS
		gdal_translate -a_srs EPSG:28350 $TEMP_PATH/raw/$WILDFILE.png $TEMP_PATH/mga_50/${WILDFILE}_IR_z50.tif -co COMPRESS=LZW -a_nodata 0 -outsize $MAPSIZE -of GTiff;
		gdal_translate -a_srs EPSG:28350 $TEMP_PATH/hotspot/$WILDFILE.png $TEMP_PATH/mga_50/${WILDFILE}_HS_z50.tif -co COMPRESS=LZW -a_nodata 0 -outsize $MAPSIZE -of GTiff;
		echo -e "${GREEN}Convert IR raster wgs84${YELLOW}";
		gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 $TEMP_PATH/mga_50/${WILDFILE}_IR_z50.tif $TEMP_PATH/wgs84/${WILDFILE}_IR_wgs84.tif -co COMPRESS=LZW -overwrite -ts 2000 1600 -ts $MAPSIZE -ot Byte;
		gdalwarp -s_srs EPSG:28350 -t_srs EPSG:4326 $TEMP_PATH/mga_50/${WILDFILE}_HS_z50.tif $TEMP_PATH/wgs84/${WILDFILE}_HS_wgs84.tif -co COMPRESS=LZW -overwrite -ts 2000 1600 -ts $MAPSIZE -ot Byte;
		echo -e "${GREEN}Scaling IR tif $TEMP_PATH/basemap/${WILDFILE}_wgs84_scaled.tif ${YELLOW}";
		gdal_translate -a_srs EPSG:4326 $TEMP_PATH/wgs84/${WILDFILE}_IR_wgs84.tif $TEMP_PATH/basemap/${WILDFILE}_IR_wgs84_scaled.tif -b 1 -b 1 -b 1 -co COMPRESS=LZW -scale $PIXELRANGE 0 255 -stats -ot Byte -outsize $MAPSIZE;
		gdal_translate -a_srs EPSG:4326 $TEMP_PATH/wgs84/${WILDFILE}_HS_wgs84.tif $TEMP_PATH/basemap/${WILDFILE}_HS_wgs84_scaled.tif -b 1 -b 2 -b 3 -co COMPRESS=LZW -scale $PIXELRANGE 0 255 -stats -ot Byte -outsize $MAPSIZE;
	 
	 	# Derive Extent and Fence of PNG for clipping vectors later
		echo -e "${PURPLE}Creating clip fence${YELLOW}";
		echo -e "${GREEN}Reducing IR raster colours to make clip fence${YELLOW}";
		gdal_merge.py -co NBITS=1 -o $TEMP_PATH/clipfence/${WILDFILE}_extent.tif $TEMP_PATH/basemap/${WILDFILE}_IR_wgs84_scaled.tif;
		echo -e "${GREEN}Polygonising IR clip fence $TEMP_PATH/clipfence/${WILDFILE}_extent.tif ${YELLOW}";
		gdal_polygonize.py $TEMP_PATH/clipfence/${WILDFILE}_extent.tif $TEMP_PATH/clipfence/${WILDFILE}_extent.shp clip;
		# convert to WGS84 crs
		echo -e "${GREEN}Stamping IR clip fence $TEMP_PATH/clipfence/${WILDFILE}_extent_wgs84.shp ${YELLOW}";
		ogr2ogr $TEMP_PATH/clipfence/${WILDFILE}_extent_wgs84.shp $TEMP_PATH/clipfence/${WILDFILE}_extent.shp -overwrite -a_srs EPSG:4326;

		# Dissolving extent to eliminate self intersect errors
	  	echo -e "${GREEN}Dissolving IR clip fence $TEMP_PATH/clipfence/${WILDFILE}_fence_wgs84.shp${YELLOW}";
		ogr2ogr $TEMP_PATH/clipfence/${WILDFILE}_fence.shp $TEMP_PATH/clipfence/${WILDFILE}_extent_wgs84.shp -dialect sqlite -sql "SELECT ST_Union(geometry) FROM '${WILDFILE}_extent_wgs84'";
		# convert to WGS84 crs
		echo -e "${GREEN}Stamping IR clip fence $TEMP_PATH/clipfence/${WILDFILE}_extent_wgs84.shp ${YELLOW}";
		ogr2ogr $TEMP_PATH/clipfence/${WILDFILE}_fence_wgs84.shp $TEMP_PATH/clipfence/${WILDFILE}_fence.shp -overwrite -a_srs EPSG:4326;

		# Clip grid roads vectors - using dummy data for testing.
	  	echo -e "${PURPLE}Clipping vectors to IR fence${YELLOW}";
	  	echo -e "${GREEN}Clipping grid ${YELLOW}";
	  	ogr2ogr -clipsrc $TEMP_PATH/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 $TEMP_PATH/grid/${WILDFILE}_grid.shp $GRIDFILE -a_srs EPSG:4326 -progress; 
		echo -e "${GREEN}Clipping roads ${YELLOW}";
		ogr2ogr -clipsrc $TEMP_PATH/clipfence/${WILDFILE}_fence_wgs84.shp -clipsrclayer ${WILDFILE}_fence_wgs84 $TEMP_PATH/roads/${WILDFILE}_roads.shp $ROADSFILE -a_srs EPSG:4326 -progress;

		# Converting vector clips to raster format
		echo -e "${PURPLE}Burning vectors to raster"; 
	  	echo -e "${GREEN}Burning grid $TEMP_PATH/grid/${WILDFILE}_grid.tif ${YELLOW} ${YELLOW}";
		gdal_rasterize -burn 10 -burn 250 -burn 250 -ts $MAPSIZE $TEMP_PATH/grid/${WILDFILE}_grid.shp $TEMP_PATH/basemap/${WILDFILE}_grid.tif -co COMPRESS=LZW -co PHOTOMETRIC=RGB -init 0 -a_nodata 0 -ot Byte -a_srs EPSG:4326;
	  	echo -e "${GREEN}Burning roads $TEMP_PATH/roads/${WILDFILE}_roads.tif${YELLOW}";
		gdal_rasterize -burn 200 -burn 10 -burn 10 -ts $MAPSIZE $TEMP_PATH/roads/${WILDFILE}_roads.shp $TEMP_PATH/basemap/${WILDFILE}_roads.tif -co COMPRESS=LZW -co PHOTOMETRIC=RGB -init 0 -a_nodata 0 -ot Byte -a_srs EPSG:4326;

		# Merging Rasters into final map
		echo -e "${PURPLE}Merging rasters into final map $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif ${YELLOW}";		
		# gdal_merge.py -o $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif $TEMP_PATH/basemap/${WILDFILE}_wgs84_scaled.tif $TEMP_PATH/hotspot/${WILDFILE}_HS.tif -n 0 -co COMPRESS=LZW -co INTERLEAVE=BAND -co PHOTOMETRIC=RGB -v -a_nodata 0 -init 0 -ot Byte;
		gdal_merge.py -o $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif $TEMP_PATH/basemap/${WILDFILE}_IR_wgs84_scaled.tif $TEMP_PATH/basemap/${WILDFILE}_HS_wgs84_scaled.tif $TEMP_PATH/basemap/${WILDFILE}_roads.tif $TEMP_PATH/basemap/${WILDFILE}_grid.tif -n 0 -co COMPRESS=LZW -co INTERLEAVE=BAND -co PHOTOMETRIC=RGB -v -a_nodata 0 -init 0 -ot Byte -ps 20 16

		# Moving output into ww folders
		echo -e "${PURPLE}Adding $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif to $WWWPATH/ ${YELLOW}"; 
		cp -f $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif $WWWPATH/$WILDFILE.tif;
		echo -e "${PURPLE}Creating GeoPDF${YELLOW}"; 
	  	gdal_translate $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif $FLIR2QR_PATH/output/${WILDFILE}.pdf -of PDF -a_srs EPSG:4326 -co EXTRA_IMAGES=$LOGO,5,0,1,$LEGEND,5,85,1 -outsize $MAPSIZE;
		cp -f $FLIR2QR_PATH/output/${WILDFILE}.pdf $WWWPATH/$WILDFILE.pdf;
	  	echo -e "${PURPLE}Creating KML${YELLOW}";
	  	gdal2tiles.py -k -t $2 $FLIR2QR_PATH/output/${WILDFILE}_wgs84.tif $TEMP_PATH/kmz/${WILDFILE}.kml;
	  	cd $TEMP_PATH/kmz/${WILDFILE}.kml
	  	mv -f $TEMP_PATH/kmz/${WILDFILE}.kml $WWWPATH/${WILDFILE}.kml;
		echo -e "${PURPLE}generating QR code for http://$IP/flir2qr/$WILDFILE.tif ${YELLOW}";
		qrencode -o $WWWPATH/qr/${WILDFILE}_tif.png http://$IP/flir2qr/$WILDFILE.tif;
	  	qrencode -o $WWWPATH/qr/${WILDFILE}_pdf.png http://$IP/flir2qr/$WILDFILE.pdf;
	  	qrencode -o $WWWPATH/qr/${WILDFILE}_kml.png http://$IP/flir2qr/$WILDFILE.kml/${WILDFILE}.kml;
	  	cp -f $WWWPATH/qr/${WILDFILE}_pdf.png $FLIR2QR_PATH/output/${WILDFILE}_qr.png;
	  	cp -f $FLIR2QR_PATH/kml/template.kml $FLIR2QR_PATH/output/${WILDFILE}_qr.kml;
	  	centroid=$(echo $(gdalinfo $TEMP_PATH/clipfence/${WILDFILE}_extent.tif | grep Center |  grep -o '(.*).' | sed 's/[()]//g'));
	  	echo -e "${PURPLE}Creating $WILDFILE centroid placemark at $centroid ${YELLOW}";
	  	sed -i 's/WILDFILE/'"$WILDFILE"'_qr.tif/g' "$FLIR2QR_PATH"'/output/'"$WILDFILE"'_qr.kml';
	  	sed -i 's/CENTROID/'"$centroid"'/g' "$FLIR2QR_PATH"'/output/'"$WILDFILE"'_qr.kml';
	  	cd $FLIR2QR_PATH/output 
	  	zip ${WILDFILE}_qr.zip ${WILDFILE}_qr.kml ${WILDFILE}_qr.png -j;
	  	mv -f $FLIR2QR_PATH/output/${WILDFILE}_qr.kml $WWWPATH/${WILDFILE}_qr.kml;
	  	mv -f $FLIR2QR_PATH/output/${WILDFILE}_qr.png $WWWPATH/${WILDFILE}_qr.png;
	  	mv -f $FLIR2QR_PATH/output/${WILDFILE}_qr.zip $WWWPATH/${WILDFILE}_qr.kmz;
		done
	 ;;
	*)
	  echo -e "${RED}Unexpected file type '$2'. 7z Archive Only! ${WHITE}";
	  echo "$timestamp - bad filetype uploaded - $2"$'\r' >> ${FLIR2QR_PATH}/log/error.log;
	;;
esac
echo -e "Processing $2 complete"'\r' >> $FLIR2QR_PATH/log/flir2qr.log;
echo -e "${BLUE}Processing $2 complete! ${WHITE}";
cp -f $FLIR2QR_PATH/log/* $WWWPATH/log;

